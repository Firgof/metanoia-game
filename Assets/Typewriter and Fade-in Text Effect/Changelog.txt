----------------------------------------------
      Typewriter & Fade-in Text Effect
                  1.3.6
        http://kalandorstudio.com
       devsupport@kalandorstudio.com
----------------------------------------------
				CHANGELOG
==============================================

Versions 1.0.0-1.1.2:
==========================
- Minor improvements and bugfixes

Version 1.2.0
==========================
# Changed
- Added a built-in Rich Text Editor! Find it via Window -> RichText Editor or in the Typewriter inspector!
- Added DisplayImmediate call if you want to display all the text without waiting but still need to invoke events and triggers properly.
- Improvements in Auto-start functionality.

#  Fixed
- When using fading effect, the unused RTF tags are now all removed properly.
- No more exceptions when AutoStart is disabled, but its Loop is set to true.
- Fixed a bug where no onFinished event was invoked when fading effect was enabled.

Version 1.3.0
==========================
# Changed
- Horizontal middle alignment (see Alignment field on the Typewriter inspector).
- Added PauseWithFade that when paused, finishes the fade-in on the currently displayed text.

#  Fixed
- When using the same trigger multiple times, a FinishImmediate call displayed all of them except for the first one.
- In Unity 5.2 some fields in UnityEngine.TextEditor has been renamed, causing RichTextEditor to throw errors. 

Version 1.3.3
==========================
# Changed
- When turning on Fix Text Width, the Text component will now always have a fix size instead of growing as the text appears.

#  Fixed
- Fixed the issue that RichTextEditor was throwing errors with the arrival of Unity 5.3.
- In some cases (when using newline characters) text alignment wasn't working properly.

Version 1.3.6.
==========================
#  Fixed
- Serialization: Your changes in Typewriter were only saved once you've changed some other objects in the scene as well. This issue cropped up with the new multi-scene editing in Unity 5.3.
- Color tags: When the same expression between <color> RTF tags occured more than once in a Typewriter input text, it caused an error in RTF tag processing.
- Newline: When entering newline into the Text component's text property and using the Typewriter's auto start or BeginDisplayMode functions, Unity's inspector escaped the newline characters, causing the Typewriter to ignore them as well.